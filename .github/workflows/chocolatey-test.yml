name: Chocolatey Package Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build the application first
  build:
    name: Build Application
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Build frontend
      run: |
        cd frontend
        npm ci --prefer-offline
        npm run build
      shell: cmd

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        cache-targets: true
        cache-all-crates: true

    - name: Build release
      run: cargo build --release --verbose

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: installer-analyzer-exe
        path: target/release/installer-analyzer.exe
        retention-days: 1

  # Test chocolatey package
  chocolatey-test:
    name: Test Chocolatey Package
    runs-on: windows-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: installer-analyzer-exe
        path: artifacts/

    - name: Install Chocolatey
      uses: crazy-max/ghaction-chocolatey@v3
      with:
        args: --version

    - name: Prepare chocolatey package for testing
      shell: pwsh
      run: |
        # Copy the built executable to chocolatey tools directory
        Copy-Item "artifacts/installer-analyzer.exe" "chocolatey/tools/installer-analyzer.exe" -Force

        # Create a test version of the nuspec with local file
        $nuspec = Get-Content "chocolatey/installer-analyzer.nuspec" -Raw
        $nuspec = $nuspec -replace '\$version\$', '0.7.0-test'
        $nuspec = $nuspec -replace '<id>installer-analyzer</id>', '<id>installer-analyzer-test</id>'
        Set-Content "chocolatey/installer-analyzer-test.nuspec" $nuspec

    - name: Create test install script
      shell: pwsh
      run: |
        # Create a simple install script for testing (avoiding YAML parsing issues)
        $script = '# Chocolatey install script for installer-analyzer (TEST VERSION)' + "`n"
        $script += '$ErrorActionPreference = ''Stop''' + "`n"
        $script += '$packageName = ''installer-analyzer''' + "`n"
        $script += '$toolsDir = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"' + "`n"
        $script += '' + "`n"
        $script += 'Write-Host "Installing $packageName (test version)..." -ForegroundColor Green' + "`n"
        $script += '' + "`n"
        $script += '# Use local file for testing' + "`n"
        $script += '$exePath = Join-Path $toolsDir "installer-analyzer.exe"' + "`n"
        $script += 'if (-not (Test-Path $exePath)) {' + "`n"
        $script += '    throw "Installation failed: installer-analyzer.exe not found at $exePath"' + "`n"
        $script += '}' + "`n"
        $script += '' + "`n"
        $script += '# Create shim for the executable so it can be found in PATH' + "`n"
        $script += 'Write-Host "Creating shim for installer-analyzer..." -ForegroundColor Green' + "`n"
        $script += 'Install-BinFile -Name "installer-analyzer" -Path $exePath' + "`n"
        $script += '' + "`n"
        $script += 'Write-Host "Installation completed successfully!" -ForegroundColor Green' + "`n"
        $script += 'Write-Host "Usage:" -ForegroundColor Yellow' + "`n"
        $script += 'Write-Host "  installer-analyzer --help" -ForegroundColor White' + "`n"
        $script += 'Write-Host "  installer-analyzer analyze setup.exe" -ForegroundColor White' + "`n"
        $script += '' + "`n"
        $script += '# Verify installation' + "`n"
        $script += 'try {' + "`n"
        $script += '    $version = & "$exePath" --version 2>&1' + "`n"
        $script += '    if ($LASTEXITCODE -eq 0) {' + "`n"
        $script += '        Write-Host "Verification successful: $version" -ForegroundColor Green' + "`n"
        $script += '    } else {' + "`n"
        $script += '        Write-Warning "Could not verify installation, but executable exists"' + "`n"
        $script += '    }' + "`n"
        $script += '} catch {' + "`n"
        $script += '    Write-Warning "Could not verify installation: $($_.Exception.Message)"' + "`n"
        $script += '}' + "`n"
        $script += '' + "`n"
        $script += 'Write-Host "installer-analyzer has been installed and is ready to use!" -ForegroundColor Green' + "`n"

        Set-Content "chocolatey/tools/chocolateyinstall.ps1" $script

    - name: Create chocolatey package
      uses: crazy-max/ghaction-chocolatey@v3
      with:
        args: pack chocolatey/installer-analyzer-test.nuspec --outputdirectory chocolatey/

    - name: Test chocolatey package installation
      shell: pwsh
      run: |
        try {
            Write-Host "Installing chocolatey package from local source..." -ForegroundColor Green

            # List files in chocolatey directory to debug
            Write-Host "Files in chocolatey directory:" -ForegroundColor Yellow
            Get-ChildItem "chocolatey" -Recurse | Format-Table Name, FullName

            # Use the absolute path to chocolatey directory as source
            $chocolateyDir = Resolve-Path "chocolatey"
            Write-Host "Using source directory: $chocolateyDir" -ForegroundColor Yellow

            # Install the package and check exit code
            $installResult = choco install installer-analyzer-test --source "$chocolateyDir" --force --yes --debug --verbose
            if ($LASTEXITCODE -ne 0) {
                throw "Chocolatey installation failed with exit code $LASTEXITCODE"
            }

            Write-Host "Package installed successfully!" -ForegroundColor Green

            # Refresh environment variables to pick up any PATH changes
            $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")

            Write-Host "Testing installed executable..." -ForegroundColor Green
            Write-Host "Current PATH: $env:PATH" -ForegroundColor Yellow

            # Try to find the executable
            $exePath = Get-Command installer-analyzer -ErrorAction SilentlyContinue
            if ($exePath) {
                Write-Host "Found installer-analyzer at: $($exePath.Source)" -ForegroundColor Green
                & $exePath.Source --version
                & $exePath.Source --help
            } else {
                # Try to find it in common chocolatey locations
                $commonPaths = @(
                    "$env:ChocolateyInstall\bin\installer-analyzer.exe",
                    "$env:ChocolateyInstall\lib\installer-analyzer-test\tools\installer-analyzer.exe"
                )

                $found = $false
                foreach ($path in $commonPaths) {
                    if (Test-Path $path) {
                        Write-Host "Found installer-analyzer at: $path" -ForegroundColor Green
                        & $path --version
                        & $path --help
                        $found = $true
                        break
                    }
                }

                if (-not $found) {
                    throw "installer-analyzer executable not found after installation"
                }
            }

            Write-Host "Chocolatey package test completed successfully!" -ForegroundColor Green
        } catch {
            Write-Error "Chocolatey package test failed: $($_.Exception.Message)"
            throw
        }

    - name: Cleanup test package
      if: always()
      shell: pwsh
      run: |
        try {
            choco uninstall installer-analyzer-test --yes --force
        } catch {
            Write-Warning "Failed to uninstall test package: $($_.Exception.Message)"
        }
