name: Chocolatey Package Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build the application first
  build:
    name: Build Application
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Build frontend
      run: |
        cd frontend
        npm ci --prefer-offline
        npm run build
      shell: cmd

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        cache-targets: true
        cache-all-crates: true

    - name: Build release
      run: cargo build --release --verbose

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: installer-analyzer-exe
        path: target/release/installer-analyzer.exe
        retention-days: 1

  # Test chocolatey package
  chocolatey-test:
    name: Test Chocolatey Package
    runs-on: windows-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: installer-analyzer-exe
        path: artifacts/

    - name: Install Chocolatey
      uses: crazy-max/ghaction-chocolatey@v3
      with:
        args: --version

    - name: Prepare chocolatey package for testing
      shell: pwsh
      run: |
        # Copy the built executable to chocolatey tools directory
        Copy-Item "artifacts/installer-analyzer.exe" "chocolatey/tools/installer-analyzer.exe" -Force

        # Create a test version of the nuspec with local file
        $nuspec = Get-Content "chocolatey/installer-analyzer.nuspec" -Raw
        $nuspec = $nuspec -replace '\$version\$', '0.7.0-test'
        $nuspec = $nuspec -replace '<id>installer-analyzer</id>', '<id>installer-analyzer-test</id>'
        Set-Content "chocolatey/installer-analyzer-test.nuspec" $nuspec

    - name: Create test install script
      shell: pwsh
      run: |
        # Create a simple install script for testing
        # According to Chocolatey best practices, exe files in tools directory are automatically shimmed
        $script = '# Chocolatey install script for installer-analyzer (TEST VERSION)' + "`n"
        $script += '$ErrorActionPreference = ''Stop''' + "`n"
        $script += '$packageName = ''installer-analyzer-test''' + "`n"
        $script += '$toolsDir = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"' + "`n"
        $script += '' + "`n"
        $script += 'Write-Host "Installing $packageName..." -ForegroundColor Green' + "`n"
        $script += '' + "`n"
        $script += '# Verify the executable exists' + "`n"
        $script += '$exePath = Join-Path $toolsDir "installer-analyzer.exe"' + "`n"
        $script += 'if (-not (Test-Path $exePath)) {' + "`n"
        $script += '    throw "Installation failed: installer-analyzer.exe not found at $exePath"' + "`n"
        $script += '}' + "`n"
        $script += '' + "`n"
        $script += 'Write-Host "Executable found at: $exePath" -ForegroundColor Green' + "`n"
        $script += '' + "`n"
        $script += '# Chocolatey will automatically create shims for exe files in tools directory' + "`n"
        $script += '# No need to manually call Install-BinFile for exe files' + "`n"
        $script += '' + "`n"
        $script += 'Write-Host "Installation completed successfully!" -ForegroundColor Green' + "`n"
        $script += 'Write-Host "The executable will be available in PATH after installation." -ForegroundColor Yellow' + "`n"

        Set-Content "chocolatey/tools/chocolateyinstall.ps1" $script

    - name: Create test uninstall script
      shell: pwsh
      run: |
        # Create uninstall script for testing
        $script = '# Chocolatey uninstall script for installer-analyzer (TEST VERSION)' + "`n"
        $script += '$ErrorActionPreference = ''Stop''' + "`n"
        $script += '$packageName = ''installer-analyzer-test''' + "`n"
        $script += '' + "`n"
        $script += 'Write-Host "Uninstalling $packageName..." -ForegroundColor Green' + "`n"
        $script += '' + "`n"
        $script += '# Chocolatey automatically removes shims for exe files' + "`n"
        $script += '# No manual cleanup needed for automatically created shims' + "`n"
        $script += '' + "`n"
        $script += 'Write-Host "Uninstallation completed successfully!" -ForegroundColor Green' + "`n"

        Set-Content "chocolatey/tools/chocolateyuninstall.ps1" $script

    - name: Create chocolatey package
      uses: crazy-max/ghaction-chocolatey@v3
      with:
        args: pack chocolatey/installer-analyzer-test.nuspec --outputdirectory chocolatey/

    - name: Test chocolatey package installation
      shell: pwsh
      run: |
        try {
            Write-Host "Installing chocolatey package from local source..." -ForegroundColor Green

            # List files in chocolatey directory to debug
            Write-Host "Files in chocolatey directory:" -ForegroundColor Yellow
            Get-ChildItem "chocolatey" -Recurse | Format-Table Name, FullName

            # Use the absolute path to chocolatey directory as source
            $chocolateyDir = Resolve-Path "chocolatey"
            Write-Host "Using source directory: $chocolateyDir" -ForegroundColor Yellow

            # Install the package
            Write-Host "Running: choco install installer-analyzer-test --source `"$chocolateyDir`" --force --yes" -ForegroundColor Yellow
            choco install installer-analyzer-test --source "$chocolateyDir" --force --yes

            if ($LASTEXITCODE -ne 0) {
                throw "Chocolatey installation failed with exit code $LASTEXITCODE"
            }

            Write-Host "Package installed successfully!" -ForegroundColor Green

            # Wait a moment for shims to be created
            Start-Sleep -Seconds 2

            # Test the installed executable
            Write-Host "Testing installed executable..." -ForegroundColor Green

            # Try to run the command directly (should work if shim was created)
            try {
                Write-Host "Running: installer-analyzer --version" -ForegroundColor Yellow
                installer-analyzer --version

                Write-Host "Running: installer-analyzer --help" -ForegroundColor Yellow
                installer-analyzer --help

                Write-Host "Chocolatey package test completed successfully!" -ForegroundColor Green
            } catch {
                Write-Warning "Direct command failed, checking shim locations..."

                # Check if shim exists
                $shimPath = "$env:ChocolateyInstall\bin\installer-analyzer.exe"
                if (Test-Path $shimPath) {
                    Write-Host "Found shim at: $shimPath" -ForegroundColor Green
                    & $shimPath --version
                    & $shimPath --help
                } else {
                    # Check original location
                    $originalPath = "$env:ChocolateyInstall\lib\installer-analyzer-test\tools\installer-analyzer.exe"
                    if (Test-Path $originalPath) {
                        Write-Host "Found original executable at: $originalPath" -ForegroundColor Green
                        & $originalPath --version
                        & $originalPath --help
                    } else {
                        throw "installer-analyzer executable not found after installation"
                    }
                }
            }
        } catch {
            Write-Error "Chocolatey package test failed: $($_.Exception.Message)"
            throw
        }

    - name: Cleanup test package
      if: always()
      shell: pwsh
      run: |
        try {
            choco uninstall installer-analyzer-test --yes --force
        } catch {
            Write-Warning "Failed to uninstall test package: $($_.Exception.Message)"
        }
