name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  CARGO_TERM_COLOR: always

# This tool is designed for Windows environments
# All testing and building is done on Windows only
jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        rust: [stable]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        # Cache key prefix for this job
        prefix-key: "ci"
        # Additional cache key components
        key: ${{ matrix.os }}-${{ matrix.rust }}
        # Cache target directory
        cache-targets: true
        # Cache cargo registry
        cache-all-crates: true
        # Save cache even on failure
        save-if: true

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Install nightly toolchain for udeps
      uses: dtolnay/rust-toolchain@nightly

    - name: Cache cargo tools
      uses: actions/cache@v3
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-tools-udeps-v1
        restore-keys: |
          ${{ runner.os }}-cargo-tools-

    - name: Install cargo-binstall
      shell: bash
      run: |
        if ! command -v cargo-binstall &> /dev/null; then
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
        fi

    - name: Install cargo-udeps (fast binary install)
      shell: bash
      run: |
        if ! command -v cargo-udeps &> /dev/null; then
          cargo binstall --no-confirm cargo-udeps
        fi

    - name: Check for unused dependencies
      run: cargo +nightly udeps --all-targets

    - name: Build
      run: cargo build --verbose

    - name: Run unit tests
      run: cargo test --lib --verbose

    - name: Run integration tests
      run: cargo test --test '*' --verbose

    - name: Run all tests with coverage
      run: cargo test --verbose --all-features

    - name: Run doc tests
      run: cargo test --doc --verbose

    - name: Build release
      run: cargo build --release --verbose

    - name: Test release binary
      run: |
        .\target\release\installer-analyzer.exe --version
        .\target\release\installer-analyzer.exe --help



  security:
    name: Security Audit
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "security"
        cache-targets: false
        save-if: true

    - name: Cache cargo tools
      uses: actions/cache@v3
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-tools-audit-v1
        restore-keys: |
          ${{ runner.os }}-cargo-tools-

    - name: Install cargo-binstall
      shell: bash
      run: |
        if ! command -v cargo-binstall &> /dev/null; then
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
        fi

    - name: Install cargo-audit (fast binary install)
      shell: bash
      run: |
        if ! command -v cargo-audit &> /dev/null; then
          cargo binstall --no-confirm cargo-audit
        fi

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "coverage"
        cache-targets: false
        save-if: true

    - name: Cache cargo tools
      uses: actions/cache@v3
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-tools-llvm-cov-v1
        restore-keys: |
          ${{ runner.os }}-cargo-tools-

    - name: Install cargo-binstall
      shell: bash
      run: |
        if ! command -v cargo-binstall &> /dev/null; then
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
        fi

    - name: Install cargo-llvm-cov (fast binary install)
      shell: bash
      run: |
        if ! command -v cargo-llvm-cov &> /dev/null; then
          cargo binstall --no-confirm cargo-llvm-cov
        fi

    - name: Generate coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: false
      continue-on-error: true
