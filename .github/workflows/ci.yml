name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CACHE_ON_FAILURE: false

# This tool is designed for Windows environments
# All testing and building is done on Windows only
jobs:
  # Build frontend once and share with other jobs
  frontend:
    name: Build Frontend
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache npm dependencies
      uses: actions/cache@v4
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Install and build frontend
      run: |
        cd frontend
        npm ci --prefer-offline
        npm run build
      shell: cmd

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/
        retention-days: 1

  # Setup shared Rust environment
  setup:
    name: Setup Rust
    runs-on: windows-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rustfmt

    - name: Generate cache key
      id: cache-key
      run: |
        $key = "rust-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}"
        echo "key=$key" >> $env:GITHUB_OUTPUT

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "setup"
        cache-targets: true
        cache-all-crates: true
        save-if: true

    - name: Cache cargo tools
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-tools-v3
        restore-keys: |
          ${{ runner.os }}-cargo-tools-

    - name: Install cargo tools
      shell: bash
      run: |
        # Install cargo-binstall if not cached
        if ! command -v cargo-binstall &> /dev/null; then
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
        fi

        # Install tools in parallel
        cargo binstall --no-confirm cargo-udeps cargo-audit cargo-llvm-cov

    - name: Pre-compile dependencies
      run: |
        cargo build --lib
        cargo build --tests

  # Quality checks job
  quality:
    name: Quality Checks
    runs-on: windows-latest
    needs: [frontend, setup]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rustfmt

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "quality"
        cache-targets: true
        cache-all-crates: true

    - name: Cache cargo tools
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-tools-v3

    - name: Check formatting
      run: cargo +stable fmt --all -- --check

    - name: Run clippy
      run: cargo +stable clippy --all-targets --all-features -- -D warnings

    - name: Check for unused dependencies
      run: cargo +nightly udeps --all-targets

  # Test job
  test:
    name: Tests
    runs-on: windows-latest
    needs: [frontend, setup]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "test"
        cache-targets: true
        cache-all-crates: true

    - name: Run tests
      run: cargo test --all-features --verbose

    - name: Run doc tests
      run: cargo test --doc --verbose



  # Security audit job
  security:
    name: Security Audit
    runs-on: windows-latest
    needs: [setup]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "security"
        cache-targets: false

    - name: Cache cargo tools
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-tools-v3

    - name: Run security audit
      run: cargo audit

  # Coverage job
  coverage:
    name: Code Coverage
    runs-on: windows-latest
    needs: [frontend, setup]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "coverage"
        cache-targets: true
        cache-all-crates: true

    - name: Cache cargo tools
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-tools-v3

    - name: Generate coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: false
      continue-on-error: true

  # Build job for release artifacts
  build:
    name: Build Release
    runs-on: windows-latest
    needs: [frontend, setup, quality, test]
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "release"
        cache-targets: true
        cache-all-crates: true

    - name: Build standard release
      run: cargo build --release --verbose

    - name: Test release binary
      run: |
        .\target\release\installer-analyzer.exe --version
        .\target\release\installer-analyzer.exe --help

    - name: Upload standard release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: installer-analyzer-windows
        path: target/release/installer-analyzer.exe
        retention-days: 30



  # PGO optimized build job
  build-pgo:
    name: Build PGO Optimized
    runs-on: windows-latest
    needs: [frontend, setup, quality, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache for PGO
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "pgo"
        cache-targets: true
        cache-all-crates: true

    - name: Cache PGO data
      uses: actions/cache@v4
      with:
        path: pgo-data
        key: ${{ runner.os }}-pgo-data-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-pgo-data-

    - name: Install LLVM tools
      shell: pwsh
      run: |
        # Try multiple methods to install LLVM tools
        Write-Host "Installing LLVM tools for PGO..." -ForegroundColor Cyan

        # Method 1: Try Chocolatey first
        try {
          choco install llvm -y --no-progress
          Write-Host "LLVM installed via Chocolatey" -ForegroundColor Green
        } catch {
          Write-Warning "Chocolatey installation failed: $($_.Exception.Message)"

          # Method 2: Try winget as fallback
          try {
            winget install LLVM.LLVM --silent --accept-package-agreements --accept-source-agreements
            Write-Host "LLVM installed via winget" -ForegroundColor Green
          } catch {
            Write-Warning "winget installation failed: $($_.Exception.Message)"

            # Method 3: Use Rust's built-in LLVM tools
            Write-Host "Using Rust's built-in LLVM tools" -ForegroundColor Yellow
          }
        }

        # Refresh environment variables
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")

        # Verify LLVM tools are available
        $llvmPaths = @(
          "llvm-profdata",
          "C:\Program Files\LLVM\bin\llvm-profdata.exe",
          "$env:USERPROFILE\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib\rustlib\x86_64-pc-windows-msvc\bin\llvm-profdata.exe"
        )

        $found = $false
        foreach ($path in $llvmPaths) {
          if (Get-Command $path -ErrorAction SilentlyContinue) {
            Write-Host "Found llvm-profdata at: $path" -ForegroundColor Green
            $found = $true
            break
          }
        }

        if (-not $found) {
          Write-Warning "llvm-profdata not found, but continuing with PGO build (rustc can handle profile data directly)"
        }

    - name: Run PGO build
      shell: pwsh
      run: |
        # Make scripts executable and run PGO build
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force

        try {
          .\scripts\build-pgo.ps1 -Verbose
          Write-Host "PGO build completed successfully" -ForegroundColor Green
        } catch {
          Write-Warning "PGO build failed: $($_.Exception.Message)"
          Write-Host "Falling back to standard release build..." -ForegroundColor Yellow

          # Fallback to standard release build
          cargo build --release --verbose

          # Copy to PGO target directory for consistency
          New-Item -ItemType Directory -Force -Path "target/release-pgo" | Out-Null
          Copy-Item "target/release/installer-analyzer.exe" "target/release-pgo/installer-analyzer.exe"

          Write-Host "Fallback build completed" -ForegroundColor Green
        }

    - name: Test PGO optimized binary
      run: |
        .\target\release-pgo\installer-analyzer.exe --version
        .\target\release-pgo\installer-analyzer.exe --help

    - name: Compare binary sizes
      shell: pwsh
      run: |
        $standardSize = (Get-Item "target/release/installer-analyzer.exe").Length
        $pgoSize = (Get-Item "target/release-pgo/installer-analyzer.exe").Length
        $sizeDiff = $pgoSize - $standardSize
        $percentDiff = [math]::Round(($sizeDiff / $standardSize) * 100, 2)

        Write-Host "📊 Binary Size Comparison:" -ForegroundColor Cyan
        Write-Host "Standard build: $([math]::Round($standardSize / 1MB, 2)) MB" -ForegroundColor Blue
        Write-Host "PGO build: $([math]::Round($pgoSize / 1MB, 2)) MB" -ForegroundColor Blue
        Write-Host "Difference: $([math]::Round($sizeDiff / 1MB, 2)) MB ($percentDiff%)" -ForegroundColor $(if ($sizeDiff -gt 0) { "Yellow" } else { "Green" })

    - name: Upload PGO optimized artifacts
      uses: actions/upload-artifact@v4
      with:
        name: installer-analyzer-windows-pgo
        path: target/release-pgo/installer-analyzer.exe
        retention-days: 30

    - name: Upload PGO profile data
      uses: actions/upload-artifact@v4
      with:
        name: pgo-profile-data
        path: pgo-data/
        retention-days: 7
