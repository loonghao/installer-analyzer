name: Release Please

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write
  repository-projects: write

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          release-type: rust
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json
          skip-github-release: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: false

  build-and-upload:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "release"
        cache-targets: true
        save-if: true

    - name: Build release binary
      run: cargo build --release --target x86_64-pc-windows-msvc

    - name: Upload Windows binary to release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.release-please.outputs.tag_name }}
        files: target/x86_64-pc-windows-msvc/release/installer-analyzer.exe
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare Chocolatey package
      run: |
        # Extract version from tag (remove 'v' prefix)
        $version = "${{ needs.release-please.outputs.tag_name }}" -replace '^v', ''
        Write-Host "Preparing Chocolatey package for version: $version"

        # Calculate SHA256 checksum of the Windows binary
        $binaryPath = "target/x86_64-pc-windows-msvc/release/installer-analyzer.exe"
        $checksum = (Get-FileHash -Path $binaryPath -Algorithm SHA256).Hash
        Write-Host "Binary SHA256: $checksum"

        # Update nuspec file with version
        $nuspecPath = "chocolatey/installer-analyzer.nuspec"
        $nuspecContent = Get-Content $nuspecPath -Raw
        $nuspecContent = $nuspecContent -replace '\$version\$', $version
        Set-Content -Path $nuspecPath -Value $nuspecContent

        # Update install script with checksum and download URL
        $installScriptPath = "chocolatey/tools/chocolateyinstall.ps1"
        $installContent = Get-Content $installScriptPath -Raw
        $downloadUrl = "https://github.com/loonghao/installer-analyzer/releases/download/${{ needs.release-please.outputs.tag_name }}/installer-analyzer.exe"
        $installContent = $installContent -replace "checksum64\s*=\s*''", "checksum64 = '$checksum'"
        $installContent = $installContent -replace 'url64bit\s*=\s*"[^"]*"', "url64bit = '$downloadUrl'"
        Set-Content -Path $installScriptPath -Value $installContent

        Write-Host "Chocolatey package prepared successfully"
      shell: pwsh

    - name: Install Chocolatey
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        Write-Host "Chocolatey installed successfully"
      shell: pwsh

    - name: Build and publish Chocolatey package
      if: env.CHOCOLATEY_API_KEY != ''
      run: |
        $version = "${{ needs.release-please.outputs.tag_name }}" -replace '^v', ''
        Write-Host "Building Chocolatey package for version: $version"

        # Build the package
        choco pack chocolatey/installer-analyzer.nuspec --version $version

        # List generated package
        $packageFile = Get-ChildItem -Name "installer-analyzer.$version.nupkg"
        Write-Host "Generated package: $packageFile"

        # Publish to Chocolatey Community Repository
        Write-Host "Publishing to Chocolatey Community Repository..."
        choco push $packageFile --source https://push.chocolatey.org/ --api-key $env:CHOCOLATEY_API_KEY

        Write-Host "Chocolatey package published successfully!"
      env:
        CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
      shell: pwsh
